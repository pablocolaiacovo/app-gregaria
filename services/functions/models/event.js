/*
* Data access layer methods. Here are the methods needed to access the firebase database
*/

const admin = require('firebase-admin');
const functions = require('firebase-functions');

admin.initializeApp(functions.config().firebase);
const db = admin.firestore();
const collectionName = 'events';

exports.getEvents = () => getAllEvents();

/*
* id: firebase database id (autogenerated on addEvent)
*/
exports.getEventById = id => getEventById(id);

/*
* event: full event object to add in the database
*/
exports.addEvent = event => addEvent(event);

/*
* id: firebase database id (autogenerated on addEvent)
* event: fulle vent object to update in the database
*/
exports.updateEvent = (id, event) => updateEvent(id, event);

/*
* id: firebase database id (autogenerated on addEvent)
*/
exports.deleteEvent = id => deleteEvent(id);

async function getAllEvents() {
    try {
        let docs = [];
        let snapshot = await db.collection(collectionName).get();
        snapshot.forEach(doc => docs.push({ id: doc.id, ...doc.data() }));
        return docs;
    } catch (err) {
        throw err;
    }
}

async function getEventById(id) {
    try {
        let docRef = await db.collection(collectionName).doc(id);
        let snapshot = await docRef.get();
        return snapshot.exists ? { id: id, ...snapshot.data(), success: true } : { success: false, message: 'No event found' };
    } catch (err) {
        throw err;
    }
}

async function getAllFirebaseDocsIds() {
    let ids = [];
    let snapshot = await db.collection(collectionName).get();
    snapshot.forEach(doc => ids.push(doc.id));
    return ids;
}

async function addEvent(event) {
    try {
        let doc = await db.collection(collectionName).add(event);
        let snapshot = await doc.get();
        return { id: snapshot.id, ...snapshot.data() };
    } catch (err) {
        throw err;
    }
}

async function updateEvent(id, udpatedEvent) {
    try {
        let docRef = db.collection(collectionName).doc(id);
        await docRef.set(udpatedEvent);
        return udpatedEvent;
    } catch (err) {
        throw err;
    }
}

async function deleteEvent(id) {
    try {
        var deletedDoc = db.collection(collectionName).doc(id).delete();
        return { id: id, 'deleted': true };
    } catch (err) {
        throw err;
    }
}